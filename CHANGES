[Unreleased]
- Nothing here so far.

[1.4.0]
- BREAKING CHANGE: Added support for multiple TypingListeners in TypingLabel. Methods "getTypingListener" and "getTypingListeners" were replaced by "setTypingListener" and "addTypingListener".
- Added If Conditionals! {IF=GENDER;f=She;m=He;t=Them;Unknown} -- See details in the wiki.
- Updated Regexodus dependency for GWT. If you use GWT and inherit Regexodus in your project, follow the installation instructions again, as some of them have changed (namely the `inherits` line).
- Fixed color tags being applied to the incorrect glyph indices. Thanks @tommyettinger!
- Fixed alpha not being applied to glyphs not affected by color-altering tokens. Thanks @tommyettinger!

[1.3.0]
- Fixed Windows line breaks (CR/LF) causing effect tokens to skip characters. This was mostly noticeable when loading strings from a text file.
- Added `TokenDelimiter` configuration to `TypingConfig`, allowing users to change the token syntax. {CurlyBrackets}, [Brackets], and (Parentheses) are supported.
- TypingLabel now depends on libGDX 1.11.0, because of differences in how it handles text internally (which this depends on). If you need compatibility with libGDX 1.9.9 through 1.10.0, you must use version 1.2.0 at the latest.

[1.2.0]
- API Addition: Added isSkipping method to TypingLabel class.
- Fixed exception being thrown when parsing malformed color values from token arguments.
- Fixed longer texts not being processed correctly after a setText call. Labels will now restart automatically after a setText call and will also skip to the end in case their progression has already ended.
- Fixed issue causing labels not to align properly to the X axis.
- Fixed some issues related to extreme frame rates, both high and low. Now the effects should remain the same independent of the FPS.
- Fixed color tokens not detecting hex codes without a hash character.
- Added new SLIDE effect.
- Added new HANG effect.

[1.1.0]
- Added global variables that can be set in TypingConfig.GLOBAL_VARS.
- API Change: Effect::onApply now takes a TypingGlyph instead of Glyph. This might break custom effects.
- Added new RAINBOW effect.
- Added new GRADIENT effect.
- Added new FADE effect.
- Added new BLINK effect.
- Added ENDCOLOR token, an alias of CLEARCOLOR, to be consistent with the rest of the tokens.

[1.0.7]
- Added new WIND effect.
- Added proper support to HTML / GWT by using RegExodus, thanks tommyettinger! See https://github.com/rafaskb/typing-label/pull/12

[1.0.6]
- Fixed bug causing glyphs to appear completely out of place.

[1.0.5]
- Added new SICK effect.
- Fixed nasty bug causing effects to affect the wrong glyphs after line breaks due to line wraps not being accounted for.
- Added support for custom effect tokens.
- API Addition: Added registerEffect and unregisterEffect methods to TypingConfig.

[1.0.4]
- Fixed bug causing last glyph to be rendered as the first one in some cases.

[1.0.3]
- API Addition: Notify listener about character progression through the method onChar(Character).
- API Addition: Added cancelSkipping(), which can be called during events after skipToTheEnd() is called.
- Fixed variables not being replaced without having a listener set.
- Fixed exception when using null as text.

[1.0.2]
- Added a way to replace variables through a listener method, instead of having to provide fixed values.
- Effect tokens now end previous effects of the same type, to prevent similar effects to stack.
- Dispose cached glyphs when label is removed from its parent.
- Fixed bug causing restart() to not actually restart the text when called from listener.end().
- Fixed bug causing weird effects to glyphs, especially on wrapped labels.
- Fixed text effects ending at the wrong character.
- Fixed events being fired at the wrong character.

[1.0.1]
- Added option to ignore events and effects while skipping to the end.
- Fixed exception being thrown when the text reached the end.
- Fixed {WAIT} tokens pausing the text one glyph ahead its position.
- Fixed TypingLabel.end() being called too many times.
- Forced all labels to calculate their full layouts. This fixes a bug causing one-line labels to not being rendered at all.
- Fixed error when creating an empty label.

[1.0.0]
- Initial code
